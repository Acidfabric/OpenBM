GAS LISTING /tmp/ccFDS3rG.s 			page 1


   1               		.file	"display.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.stabs	"/media/sda6/home/tevs/src/psyBMW_trunk/avr/BordMonitor/",100,0,2,.Ltext0
  11               		.stabs	"display.c",100,0,2,.Ltext0
  12               		.text
  13               	.Ltext0:
  14               		.stabs	"gcc2_compiled.",60,0,0,0
  15               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,1,0
  16               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,1,0
  17               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,1,0
  18               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,1,0
  19               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,1,0
  20               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,1,
  21               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,1,0
  22               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,1,0
  23               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,1,0
  24               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,1,0
  25               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,1,0
  26               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,1,0
  27               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,1,0
  28               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,1,0
  29               		.stabs	"void:t(0,15)=(0,15)",128,0,1,0
  30               		.stabs	"display.h",130,0,0,0
  31               		.stabs	"./include/base.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/io.h",130,0,0,0
  33               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/sfr_defs.h",130,0,0,0
  34               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/inttypes.h",130,0,0,0
  35               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/stdint.h",130,0,0,0
  36               		.stabs	"int8_t:t(6,1)=(0,10)",128,0,121,0
  37               		.stabs	"uint8_t:t(6,2)=(0,11)",128,0,122,0
  38               		.stabs	"int16_t:t(6,3)=(0,1)",128,0,123,0
  39               		.stabs	"uint16_t:t(6,4)=(0,4)",128,0,124,0
  40               		.stabs	"int32_t:t(6,5)=(0,3)",128,0,125,0
  41               		.stabs	"uint32_t:t(6,6)=(0,5)",128,0,126,0
  42               		.stabs	"int64_t:t(6,7)=(0,6)",128,0,128,0
  43               		.stabs	"uint64_t:t(6,8)=(0,7)",128,0,129,0
  44               		.stabs	"intptr_t:t(6,9)=(6,3)",128,0,142,0
  45               		.stabs	"uintptr_t:t(6,10)=(6,4)",128,0,147,0
  46               		.stabs	"int_least8_t:t(6,11)=(6,1)",128,0,159,0
  47               		.stabs	"uint_least8_t:t(6,12)=(6,2)",128,0,164,0
  48               		.stabs	"int_least16_t:t(6,13)=(6,3)",128,0,169,0
  49               		.stabs	"uint_least16_t:t(6,14)=(6,4)",128,0,174,0
  50               		.stabs	"int_least32_t:t(6,15)=(6,5)",128,0,179,0
  51               		.stabs	"uint_least32_t:t(6,16)=(6,6)",128,0,184,0
  52               		.stabs	"int_least64_t:t(6,17)=(6,7)",128,0,192,0
  53               		.stabs	"uint_least64_t:t(6,18)=(6,8)",128,0,199,0
  54               		.stabs	"int_fast8_t:t(6,19)=(6,1)",128,0,213,0
  55               		.stabs	"uint_fast8_t:t(6,20)=(6,2)",128,0,218,0
  56               		.stabs	"int_fast16_t:t(6,21)=(6,3)",128,0,223,0
  57               		.stabs	"uint_fast16_t:t(6,22)=(6,4)",128,0,228,0
GAS LISTING /tmp/ccFDS3rG.s 			page 2


  58               		.stabs	"int_fast32_t:t(6,23)=(6,5)",128,0,233,0
  59               		.stabs	"uint_fast32_t:t(6,24)=(6,6)",128,0,238,0
  60               		.stabs	"int_fast64_t:t(6,25)=(6,7)",128,0,246,0
  61               		.stabs	"uint_fast64_t:t(6,26)=(6,8)",128,0,253,0
  62               		.stabs	"intmax_t:t(6,27)=(6,7)",128,0,273,0
  63               		.stabs	"uintmax_t:t(6,28)=(6,8)",128,0,278,0
  64               		.stabn	162,0,0,0
  65               		.stabs	"int_farptr_t:t(5,1)=(6,5)",128,0,77,0
  66               		.stabs	"uint_farptr_t:t(5,2)=(6,6)",128,0,81,0
  67               		.stabn	162,0,0,0
  68               		.stabn	162,0,0,0
  69               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/fuse.h",130,0,0,0
  70               		.stabs	"__fuse_t:t(7,1)=(7,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,247,0
  71               		.stabn	162,0,0,0
  72               		.stabn	162,0,0,0
  73               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/stdlib.h",130,0,0,0
  74               		.stabs	"/usr/lib/gcc/avr/4.3.4/include/stddef.h",130,0,0,0
  75               		.stabs	"size_t:t(9,1)=(0,4)",128,0,214,0
  76               		.stabs	"wchar_t:t(9,2)=(0,1)",128,0,326,0
  77               		.stabn	162,0,0,0
  78               		.stabs	"div_t:t(8,1)=(8,2)=s4quot:(0,1),0,16;rem:(0,1),16,16;;",128,0,71,0
  79               		.stabs	"ldiv_t:t(8,3)=(8,4)=s8quot:(0,3),0,32;rem:(0,3),32,32;;",128,0,77,0
  80               		.stabs	"__compar_fn_t:t(8,5)=(8,6)=*(8,7)=f(0,1)",128,0,80,0
  81               		.stabn	162,0,0,0
  82               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/pgmspace.h",130,0,0,0
  83               		.stabs	"prog_void:t(10,1)=(10,2)=(10,2)",128,0,211,0
  84               		.stabs	"prog_char:t(10,3)=(10,4)=@s8;r(10,4);0;255;",128,0,212,0
  85               		.stabs	"prog_uchar:t(10,5)=(10,4)",128,0,213,0
  86               		.stabs	"prog_int8_t:t(10,6)=(10,7)=(0,10)",128,0,215,0
  87               		.stabs	"prog_uint8_t:t(10,8)=(10,4)",128,0,216,0
  88               		.stabs	"prog_int16_t:t(10,9)=(10,10)=(0,1)",128,0,217,0
  89               		.stabs	"prog_uint16_t:t(10,11)=(10,12)=(0,4)",128,0,218,0
  90               		.stabs	"prog_int32_t:t(10,13)=(10,14)=(0,3)",128,0,219,0
  91               		.stabs	"prog_uint32_t:t(10,15)=(10,16)=(0,5)",128,0,220,0
  92               		.stabs	"prog_int64_t:t(10,17)=(10,18)=(0,6)",128,0,222,0
  93               		.stabs	"prog_uint64_t:t(10,19)=(10,20)=(0,7)",128,0,223,0
  94               		.stabn	162,0,0,0
  95               		.stabs	"ticks_t:t(2,1)=(6,6)",128,0,48,0
  96               		.stabn	162,0,0,0
  97               		.stabn	162,0,0,0
  98               		.stabs	"buttons.h",130,0,0,0
  99               		.stabs	"buttonIndex_t:t(11,1)=(6,2)",128,0,32,0
 100               		.stabs	"buttonGlobalState_t:t(11,2)=(6,6)",128,0,86,0
 101               		.stabs	"buttonBool_t:t(11,3)=(6,2)",128,0,87,0
 102               		.stabn	162,0,0,0
 103               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/eeprom.h",130,0,0,0
 104               		.stabs	"/usr/lib/gcc/avr/4.3.4/include/stddef.h",130,0,0,0
 105               		.stabs	"ptrdiff_t:t(13,1)=(0,1)",128,0,152,0
 106               		.stabn	162,0,0,0
 107               		.stabn	162,0,0,0
 108               		.stabs	"_DisplayState:T(0,16)=s2display_Power:(6,2),0,8;display_Input:(6,2),8,8;;",128,0,0,0
 109               		.stabs	"DisplayState:t(0,17)=(0,16)",128,0,13,0
 110               		.stabs	"display_setInputState:F(0,15)",36,0,80,display_setInputState
 111               		.stabs	"state:P(6,2)",64,0,79,22
 112               	.global	display_setInputState
 113               		.type	display_setInputState, @function
 114               	display_setInputState:
GAS LISTING /tmp/ccFDS3rG.s 			page 3


 115               		.stabd	46,0,0
   0:display.c     **** #include "display.h"
   1:display.c     **** #include "leds.h"
   2:display.c     **** #include "buttons.h"
   3:display.c     **** #include <avr/eeprom.h>
   4:display.c     **** 
   5:display.c     **** //------------------------------------------------------------------------------
   6:display.c     **** // Current display state, (on/off, input)
   7:display.c     **** //------------------------------------------------------------------------------
   8:display.c     **** typedef struct _DisplayState
   9:display.c     **** {
  10:display.c     ****     uint8_t display_Power;
  11:display.c     ****     uint8_t display_Input; // (0=vga, 1=av1, 2=av2)
  12:display.c     **** }DisplayState;
  13:display.c     **** 
  14:display.c     **** // current hardware state
  15:display.c     **** DisplayState g_DisplayState;
  16:display.c     **** DisplayState g_eeprom_DisplayState EEMEM;
  17:display.c     **** 
  18:display.c     **** //------------------------------------------------------------------------------
  19:display.c     **** void display_init(void)
  20:display.c     **** {
  21:display.c     ****     // display power switch
  22:display.c     ****     DDRC |= (1 << DDC3); PORTC |= (1 << 3);
  23:display.c     **** 
  24:display.c     ****     // display input switch
  25:display.c     ****     DDRC |= (1 << DDC4); PORTC |= (1 << 4);
  26:display.c     **** 
  27:display.c     ****     // load current display state from the eeprom
  28:display.c     ****     eeprom_busy_wait();
  29:display.c     ****     g_DisplayState.display_Input = eeprom_read_byte(&g_eeprom_DisplayState.display_Input);
  30:display.c     ****     g_DisplayState.display_Power = eeprom_read_byte(&g_eeprom_DisplayState.display_Power);
  31:display.c     **** }
  32:display.c     **** 
  33:display.c     **** //------------------------------------------------------------------------------
  34:display.c     **** void display_TogglePower(uint8_t writeToEeprom)
  35:display.c     **** {
  36:display.c     ****     // emulate key
  37:display.c     ****     PORTC &= ~(1 << 3);
  38:display.c     ****     _delay_ms(100);
  39:display.c     ****     PORTC |= (1 << 3);
  40:display.c     **** 
  41:display.c     ****     // update current state and write into eeprom
  42:display.c     ****     if (writeToEeprom)
  43:display.c     ****     {
  44:display.c     ****         g_DisplayState.display_Power = !g_DisplayState.display_Power;
  45:display.c     ****         eeprom_busy_wait();
  46:display.c     ****         eeprom_write_byte(&g_eeprom_DisplayState.display_Power, g_DisplayState.display_Power);
  47:display.c     ****     }
  48:display.c     ****     //_delay_ms(1000);
  49:display.c     **** }
  50:display.c     **** 
  51:display.c     **** //------------------------------------------------------------------------------
  52:display.c     **** void display_setPowerState(uint8_t state)
  53:display.c     **** {
  54:display.c     ****     g_DisplayState.display_Power = state;
  55:display.c     ****     eeprom_busy_wait();
GAS LISTING /tmp/ccFDS3rG.s 			page 4


  56:display.c     ****     eeprom_write_byte(&g_eeprom_DisplayState.display_Power, g_DisplayState.display_Power);
  57:display.c     **** }
  58:display.c     **** 
  59:display.c     **** //------------------------------------------------------------------------------
  60:display.c     **** void display_ToggleInput(uint8_t writeToEeprom)
  61:display.c     **** {
  62:display.c     ****     // emulate key
  63:display.c     ****     PORTC &= ~(1 << 4);
  64:display.c     ****     _delay_ms(100);
  65:display.c     ****     PORTC |= (1 << 4);
  66:display.c     **** 
  67:display.c     ****     // update current state and write into eeprom
  68:display.c     ****     if (writeToEeprom)
  69:display.c     ****     {
  70:display.c     ****         g_DisplayState.display_Input = (g_DisplayState.display_Input + 1) % 3;
  71:display.c     ****         eeprom_busy_wait();
  72:display.c     ****         eeprom_write_byte(&g_eeprom_DisplayState.display_Input, g_DisplayState.display_Input);
  73:display.c     ****     }
  74:display.c     ****     //_delay_ms(1000);
  75:display.c     **** }
  76:display.c     **** 
  77:display.c     **** //------------------------------------------------------------------------------
  78:display.c     **** void display_setInputState(uint8_t state)
  79:display.c     **** {
 116               		.stabn	68,0,80,.LM0-.LFBB1
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121 0000 682F      		mov r22,r24
  80:display.c     ****     g_DisplayState.display_Input = state;
 122               		.stabn	68,0,81,.LM1-.LFBB1
 123               	.LM1:
 124 0002 8093 0000 		sts g_DisplayState+1,r24
 125               	.L2:
  81:display.c     ****     eeprom_busy_wait();
 126               		.stabn	68,0,82,.LM2-.LFBB1
 127               	.LM2:
 128 0006 E199      		sbic 60-32,1
 129 0008 00C0      		rjmp .L2
  82:display.c     ****     eeprom_write_byte(&g_eeprom_DisplayState.display_Input, g_DisplayState.display_Input);
 130               		.stabn	68,0,83,.LM3-.LFBB1
 131               	.LM3:
 132 000a 80E0      		ldi r24,lo8(g_eeprom_DisplayState+1)
 133 000c 90E0      		ldi r25,hi8(g_eeprom_DisplayState+1)
 134 000e 0E94 0000 		call __eewr_byte_m32
 135               	/* epilogue start */
  83:display.c     **** }
 136               		.stabn	68,0,84,.LM4-.LFBB1
 137               	.LM4:
 138 0012 0895      		ret
 139               		.size	display_setInputState, .-display_setInputState
 140               	.Lscope1:
 141               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 142               		.stabd	78,0,0
 143               		.stabs	"display_ToggleInput:F(0,15)",36,0,62,display_ToggleInput
 144               		.stabs	"writeToEeprom:P(6,2)",64,0,61,24
GAS LISTING /tmp/ccFDS3rG.s 			page 5


 145               	.global	display_ToggleInput
 146               		.type	display_ToggleInput, @function
 147               	display_ToggleInput:
 148               		.stabd	46,0,0
  62:display.c     **** {
 149               		.stabn	68,0,62,.LM5-.LFBB2
 150               	.LM5:
 151               	.LFBB2:
 152               	/* prologue: function */
 153               	/* frame size = 0 */
  64:display.c     ****     PORTC &= ~(1 << 4);
 154               		.stabn	68,0,64,.LM6-.LFBB2
 155               	.LM6:
 156 0014 AC98      		cbi 53-32,4
 157 0016 28EE      		ldi r18,lo8(1000)
 158 0018 33E0      		ldi r19,hi8(1000)
 159               	.LBB60:
 160               	.LBB61:
 161               	.LBB62:
 162               	.LBB63:
 163               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext1
 164               	.Ltext1:
   0:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   1:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   2:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
   4:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
   7:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  10:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      distribution.
  14:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  15:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  18:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  19:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  30:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  31:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  32:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  33:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  34:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
GAS LISTING /tmp/ccFDS3rG.s 			page 6


  35:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  36:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  37:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  38:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \file */
  39:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  40:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     \code
  41:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  42:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     \endcode
  43:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  45:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  46:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  47:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  48:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  49:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  50:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  51:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  52:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  53:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  54:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  55:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  56:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  57:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  58:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  59:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  60:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  61:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** */
  62:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  63:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  64:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  65:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  66:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #endif
  67:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  68:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  69:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  70:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  71:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  72:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  73:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  74:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     register.
  75:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  76:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  77:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     can be achieved.
  78:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** */
  79:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** void
  80:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  81:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** {
  82:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  83:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  84:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  85:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  86:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  87:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 	);
  88:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** }
  89:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  90:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  91:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
GAS LISTING /tmp/ccFDS3rG.s 			page 7


  92:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  93:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  94:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  95:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  96:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     counter register pair.
  97:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  98:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
  99:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 100:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****  */
 101:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** void
 102:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 103:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** {
 104:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 165               		.stabn	68,0,105,.LM7-.LFBB2
 166               	.LM7:
 167 001a 40E7      		ldi r20,lo8(368)
 168 001c 51E0      		ldi r21,hi8(368)
 169               	.L6:
 170 001e FA01      		movw r30,r20
 171               	/* #APP */
 172               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 173 0020 3197      		1: sbiw r30,1
 174 0022 01F4      		brne 1b
 175               	 ;  0 "" 2
 176               	/* #NOAPP */
 177               	.LBE63:
 178               	.LBE62:
 179               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext2
 180               	.Ltext2:
   0:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   1:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   2:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   3:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
   5:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
   8:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  11:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****      distribution.
  15:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  16:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  20:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
GAS LISTING /tmp/ccFDS3rG.s 			page 8


  28:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  32:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5.2.1 2009/02/25 10:14:03 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  34:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  37:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  39:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  40:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** /** \file */
  41:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  42:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     \code
  43:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  44:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  45:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  46:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     \endcode
  47:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  48:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  49:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  50:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  51:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     used.
  52:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  53:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  54:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  55:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  56:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  57:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  58:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  59:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  60:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  61:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  62:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  63:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  64:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  65:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  66:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  67:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  68:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  69:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     routines linked into the application.
  70:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  71:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  72:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  73:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  74:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  75:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** */
  76:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  78:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  79:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  80:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #endif
  81:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  82:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #ifndef F_CPU
  83:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  84:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
GAS LISTING /tmp/ccFDS3rG.s 			page 9


  85:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  86:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  89:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  90:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** #endif
  91:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  92:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** /**
  93:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    \ingroup util_delay
  94:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  95:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
  96:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
  97:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  98:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
  99:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
 100:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 101:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 
 102:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 103:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 104:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 105:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 106:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 107:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h ****  */
 108:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** void
 109:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 110:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** {
 111:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 112:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 113:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 114:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		__ticks = 1;
 115:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 116:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 	{
 117:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 118:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 119:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		{
 121:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 122:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 123:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 			__ticks --;
 181               		.stabn	68,0,124,.LM8-.LFBB2
 182               	.LM8:
 183 0024 2150      		subi r18,lo8(-(-1))
 184 0026 3040      		sbci r19,hi8(-(-1))
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 185               		.stabn	68,0,120,.LM9-.LFBB2
 186               	.LM9:
 187 0028 01F4      		brne .L6
 188               	.LBE61:
 189               	.LBE60:
 190               		.stabs	"display.c",132,0,0,.Ltext3
 191               	.Ltext3:
  66:display.c     ****     PORTC |= (1 << 4);
 192               		.stabn	68,0,66,.LM10-.LFBB2
 193               	.LM10:
 194 002a AC9A      		sbi 53-32,4
  69:display.c     ****     if (writeToEeprom)
 195               		.stabn	68,0,69,.LM11-.LFBB2
GAS LISTING /tmp/ccFDS3rG.s 			page 10


 196               	.LM11:
 197 002c 8823      		tst r24
 198 002e 01F0      		breq .L9
  71:display.c     ****         g_DisplayState.display_Input = (g_DisplayState.display_Input + 1) % 3;
 199               		.stabn	68,0,71,.LM12-.LFBB2
 200               	.LM12:
 201 0030 8091 0000 		lds r24,g_DisplayState+1
 202 0034 90E0      		ldi r25,lo8(0)
 203 0036 0196      		adiw r24,1
 204 0038 63E0      		ldi r22,lo8(3)
 205 003a 70E0      		ldi r23,hi8(3)
 206 003c 0E94 0000 		call __divmodhi4
 207 0040 682F      		mov r22,r24
 208 0042 8093 0000 		sts g_DisplayState+1,r24
 209               	.L8:
  72:display.c     ****         eeprom_busy_wait();
 210               		.stabn	68,0,72,.LM13-.LFBB2
 211               	.LM13:
 212 0046 E199      		sbic 60-32,1
 213 0048 00C0      		rjmp .L8
  73:display.c     ****         eeprom_write_byte(&g_eeprom_DisplayState.display_Input, g_DisplayState.display_Input);
 214               		.stabn	68,0,73,.LM14-.LFBB2
 215               	.LM14:
 216 004a 80E0      		ldi r24,lo8(g_eeprom_DisplayState+1)
 217 004c 90E0      		ldi r25,hi8(g_eeprom_DisplayState+1)
 218 004e 0E94 0000 		call __eewr_byte_m32
 219               	.L9:
 220 0052 0895      		ret
 221               		.size	display_ToggleInput, .-display_ToggleInput
 222               		.stabs	"__ticks:r(6,4)",64,0,112,18
 223               		.stabn	192,0,0,.LBB61-.LFBB2
 224               		.stabs	"__count:r(6,4)",64,0,123,30
 225               		.stabn	192,0,0,.LBB62-.LFBB2
 226               		.stabn	224,0,0,.LBE62-.LFBB2
 227               		.stabn	224,0,0,.LBE61-.LFBB2
 228               	.Lscope2:
 229               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 230               		.stabd	78,0,0
 231               		.stabs	"display_setPowerState:F(0,15)",36,0,54,display_setPowerState
 232               		.stabs	"state:P(6,2)",64,0,53,22
 233               	.global	display_setPowerState
 234               		.type	display_setPowerState, @function
 235               	display_setPowerState:
 236               		.stabd	46,0,0
  54:display.c     **** {
 237               		.stabn	68,0,54,.LM15-.LFBB3
 238               	.LM15:
 239               	.LFBB3:
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242 0054 682F      		mov r22,r24
  55:display.c     ****     g_DisplayState.display_Power = state;
 243               		.stabn	68,0,55,.LM16-.LFBB3
 244               	.LM16:
 245 0056 8093 0000 		sts g_DisplayState,r24
 246               	.L13:
  56:display.c     ****     eeprom_busy_wait();
GAS LISTING /tmp/ccFDS3rG.s 			page 11


 247               		.stabn	68,0,56,.LM17-.LFBB3
 248               	.LM17:
 249 005a E199      		sbic 60-32,1
 250 005c 00C0      		rjmp .L13
  57:display.c     ****     eeprom_write_byte(&g_eeprom_DisplayState.display_Power, g_DisplayState.display_Power);
 251               		.stabn	68,0,57,.LM18-.LFBB3
 252               	.LM18:
 253 005e 80E0      		ldi r24,lo8(g_eeprom_DisplayState)
 254 0060 90E0      		ldi r25,hi8(g_eeprom_DisplayState)
 255 0062 0E94 0000 		call __eewr_byte_m32
 256               	/* epilogue start */
  58:display.c     **** }
 257               		.stabn	68,0,58,.LM19-.LFBB3
 258               	.LM19:
 259 0066 0895      		ret
 260               		.size	display_setPowerState, .-display_setPowerState
 261               	.Lscope3:
 262               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 263               		.stabd	78,0,0
 264               		.stabs	"display_TogglePower:F(0,15)",36,0,36,display_TogglePower
 265               		.stabs	"writeToEeprom:P(6,2)",64,0,35,24
 266               	.global	display_TogglePower
 267               		.type	display_TogglePower, @function
 268               	display_TogglePower:
 269               		.stabd	46,0,0
  36:display.c     **** {
 270               		.stabn	68,0,36,.LM20-.LFBB4
 271               	.LM20:
 272               	.LFBB4:
 273               	/* prologue: function */
 274               	/* frame size = 0 */
  38:display.c     ****     PORTC &= ~(1 << 3);
 275               		.stabn	68,0,38,.LM21-.LFBB4
 276               	.LM21:
 277 0068 AB98      		cbi 53-32,3
 278 006a 28EE      		ldi r18,lo8(1000)
 279 006c 33E0      		ldi r19,hi8(1000)
 280               	.LBB64:
 281               	.LBB65:
 282               	.LBB66:
 283               	.LBB67:
 284               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext4
 285               	.Ltext4:
 286               		.stabn	68,0,105,.LM22-.LFBB4
 287               	.LM22:
 288 006e 40E7      		ldi r20,lo8(368)
 289 0070 51E0      		ldi r21,hi8(368)
 290               	.L17:
 291 0072 FA01      		movw r30,r20
 292               	/* #APP */
 293               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 294 0074 3197      		1: sbiw r30,1
 295 0076 01F4      		brne 1b
 296               	 ;  0 "" 2
 297               	/* #NOAPP */
 298               	.LBE67:
 299               	.LBE66:
GAS LISTING /tmp/ccFDS3rG.s 			page 12


 300               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext5
 301               	.Ltext5:
 302               		.stabn	68,0,124,.LM23-.LFBB4
 303               	.LM23:
 304 0078 2150      		subi r18,lo8(-(-1))
 305 007a 3040      		sbci r19,hi8(-(-1))
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 306               		.stabn	68,0,120,.LM24-.LFBB4
 307               	.LM24:
 308 007c 01F4      		brne .L17
 309               	.LBE65:
 310               	.LBE64:
 311               		.stabs	"display.c",132,0,0,.Ltext6
 312               	.Ltext6:
  40:display.c     ****     PORTC |= (1 << 3);
 313               		.stabn	68,0,40,.LM25-.LFBB4
 314               	.LM25:
 315 007e AB9A      		sbi 53-32,3
  43:display.c     ****     if (writeToEeprom)
 316               		.stabn	68,0,43,.LM26-.LFBB4
 317               	.LM26:
 318 0080 8823      		tst r24
 319 0082 01F0      		breq .L21
  45:display.c     ****         g_DisplayState.display_Power = !g_DisplayState.display_Power;
 320               		.stabn	68,0,45,.LM27-.LFBB4
 321               	.LM27:
 322 0084 60E0      		ldi r22,lo8(0)
 323 0086 8091 0000 		lds r24,g_DisplayState
 324 008a 8823      		tst r24
 325 008c 01F4      		brne .L19
 326 008e 61E0      		ldi r22,lo8(1)
 327               	.L19:
 328 0090 6093 0000 		sts g_DisplayState,r22
 329               	.L20:
  46:display.c     ****         eeprom_busy_wait();
 330               		.stabn	68,0,46,.LM28-.LFBB4
 331               	.LM28:
 332 0094 E199      		sbic 60-32,1
 333 0096 00C0      		rjmp .L20
  47:display.c     ****         eeprom_write_byte(&g_eeprom_DisplayState.display_Power, g_DisplayState.display_Power);
 334               		.stabn	68,0,47,.LM29-.LFBB4
 335               	.LM29:
 336 0098 80E0      		ldi r24,lo8(g_eeprom_DisplayState)
 337 009a 90E0      		ldi r25,hi8(g_eeprom_DisplayState)
 338 009c 0E94 0000 		call __eewr_byte_m32
 339               	.L21:
 340 00a0 0895      		ret
 341               		.size	display_TogglePower, .-display_TogglePower
 342               		.stabs	"__ticks:r(6,4)",64,0,112,18
 343               		.stabn	192,0,0,.LBB65-.LFBB4
 344               		.stabs	"__count:r(6,4)",64,0,123,30
 345               		.stabn	192,0,0,.LBB66-.LFBB4
 346               		.stabn	224,0,0,.LBE66-.LFBB4
 347               		.stabn	224,0,0,.LBE65-.LFBB4
 348               	.Lscope4:
 349               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 350               		.stabd	78,0,0
GAS LISTING /tmp/ccFDS3rG.s 			page 13


 351               		.stabs	"display_updateState:F(0,15)",36,0,88,display_updateState
 352               	.global	display_updateState
 353               		.type	display_updateState, @function
 354               	display_updateState:
 355               		.stabd	46,0,0
  84:display.c     **** 
  85:display.c     **** //------------------------------------------------------------------------------
  86:display.c     **** void display_updateState(void)
  87:display.c     **** {
 356               		.stabn	68,0,88,.LM30-.LFBB5
 357               	.LM30:
 358               	.LFBB5:
 359               	/* prologue: function */
 360               	/* frame size = 0 */
  88:display.c     ****     static uint32_t started;
  89:display.c     ****     static uint32_t stopped;
  90:display.c     ****     static uint8_t ignoreButtons = 0;
  91:display.c     **** 
  92:display.c     ****     // if button was pressed, then start tick counter
  93:display.c     ****     if (button_pressed(BUTTON_DISP))
 361               		.stabn	68,0,94,.LM31-.LFBB5
 362               	.LM31:
 363 00a2 81E0      		ldi r24,lo8(1)
 364 00a4 0E94 0000 		call button_pressed
 365 00a8 8823      		tst r24
 366 00aa 01F0      		breq .L25
  94:display.c     ****     {
  95:display.c     ****         started = g_tickNumber;
 367               		.stabn	68,0,96,.LM32-.LFBB5
 368               	.LM32:
 369 00ac 8091 0000 		lds r24,g_tickNumber
 370 00b0 9091 0000 		lds r25,(g_tickNumber)+1
 371 00b4 A091 0000 		lds r26,(g_tickNumber)+2
 372 00b8 B091 0000 		lds r27,(g_tickNumber)+3
 373 00bc 8093 0000 		sts started.1631,r24
 374 00c0 9093 0000 		sts (started.1631)+1,r25
 375 00c4 A093 0000 		sts (started.1631)+2,r26
 376 00c8 B093 0000 		sts (started.1631)+3,r27
  96:display.c     ****         stopped = started + 2 * TICKS_PER_SECOND();
 377               		.stabn	68,0,97,.LM33-.LFBB5
 378               	.LM33:
 379 00cc 8056      		subi r24,lo8(-(160))
 380 00ce 9F4F      		sbci r25,hi8(-(160))
 381 00d0 AF4F      		sbci r26,hlo8(-(160))
 382 00d2 BF4F      		sbci r27,hhi8(-(160))
 383 00d4 8093 0000 		sts stopped.1632,r24
 384 00d8 9093 0000 		sts (stopped.1632)+1,r25
 385 00dc A093 0000 		sts (stopped.1632)+2,r26
 386 00e0 B093 0000 		sts (stopped.1632)+3,r27
 387 00e4 0895      		ret
 388               	.L25:
  97:display.c     **** 
  98:display.c     ****     // if holding button longer than certain time, then turn off screen if it is on
  99:display.c     ****     }else if (button_down(BUTTON_DISP) && g_tickNumber > stopped && ignoreButtons == 0)
 389               		.stabn	68,0,100,.LM34-.LFBB5
 390               	.LM34:
 391 00e6 81E0      		ldi r24,lo8(1)
GAS LISTING /tmp/ccFDS3rG.s 			page 14


 392 00e8 0E94 0000 		call button_down
 393 00ec 8823      		tst r24
 394 00ee 01F4      		brne .+2
 395 00f0 00C0      		rjmp .L27
 396 00f2 2091 0000 		lds r18,g_tickNumber
 397 00f6 3091 0000 		lds r19,(g_tickNumber)+1
 398 00fa 4091 0000 		lds r20,(g_tickNumber)+2
 399 00fe 5091 0000 		lds r21,(g_tickNumber)+3
 400 0102 8091 0000 		lds r24,stopped.1632
 401 0106 9091 0000 		lds r25,(stopped.1632)+1
 402 010a A091 0000 		lds r26,(stopped.1632)+2
 403 010e B091 0000 		lds r27,(stopped.1632)+3
 404 0112 8217      		cp r24,r18
 405 0114 9307      		cpc r25,r19
 406 0116 A407      		cpc r26,r20
 407 0118 B507      		cpc r27,r21
 408 011a 00F0      		brlo .+2
 409 011c 00C0      		rjmp .L27
 410 011e 8091 0000 		lds r24,ignoreButtons.1633
 411 0122 8823      		tst r24
 412 0124 01F0      		breq .+2
 413 0126 00C0      		rjmp .L27
 100:display.c     ****     {
 101:display.c     ****         // if time elapsed and also SELECT and MENU button was hold, then set display
 102:display.c     ****         // state to predefined value (on, vga). this will make sure that display state
 103:display.c     ****         // is synchronized with the display itself
 104:display.c     ****         if (button_down(BUTTON_MENU_LR) && button_down(BUTTON_SELECT))
 414               		.stabn	68,0,105,.LM35-.LFBB5
 415               	.LM35:
 416 0128 80E1      		ldi r24,lo8(16)
 417 012a 0E94 0000 		call button_down
 418 012e 8823      		tst r24
 419 0130 01F4      		brne .+2
 420 0132 00C0      		rjmp .L28
 421 0134 8DE0      		ldi r24,lo8(13)
 422 0136 0E94 0000 		call button_down
 423 013a 8823      		tst r24
 424 013c 01F4      		brne .+2
 425 013e 00C0      		rjmp .L28
 105:display.c     ****         {
 106:display.c     ****             // ok reset the state to a default value (vga, power on)
 107:display.c     ****             display_setPowerState(1);
 426               		.stabn	68,0,108,.LM36-.LFBB5
 427               	.LM36:
 428 0140 81E0      		ldi r24,lo8(1)
 429 0142 0E94 0000 		call display_setPowerState
 108:display.c     ****             display_setInputState(0);
 430               		.stabn	68,0,109,.LM37-.LFBB5
 431               	.LM37:
 432 0146 80E0      		ldi r24,lo8(0)
 433 0148 0E94 0000 		call display_setInputState
 109:display.c     **** 
 110:display.c     ****             // indicate by LEDs
 111:display.c     ****             led_radio_immediate_set(1);
 434               		.stabn	68,0,112,.LM38-.LFBB5
 435               	.LM38:
 436 014c 81E0      		ldi r24,lo8(1)
GAS LISTING /tmp/ccFDS3rG.s 			page 15


 437 014e 0E94 0000 		call led_radio_immediate_set
 438 0152 88E8      		ldi r24,lo8(5000)
 439 0154 93E1      		ldi r25,hi8(5000)
 440               	.LBB68:
 441               	.LBB69:
 442               	.LBB70:
 443               	.LBB71:
 444               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext7
 445               	.Ltext7:
 446               		.stabn	68,0,105,.LM39-.LFBB5
 447               	.LM39:
 448 0156 20E7      		ldi r18,lo8(368)
 449 0158 31E0      		ldi r19,hi8(368)
 450               	.L29:
 451 015a F901      		movw r30,r18
 452               	/* #APP */
 453               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 454 015c 3197      		1: sbiw r30,1
 455 015e 01F4      		brne 1b
 456               	 ;  0 "" 2
 457               	/* #NOAPP */
 458               	.LBE71:
 459               	.LBE70:
 460               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext8
 461               	.Ltext8:
 462               		.stabn	68,0,124,.LM40-.LFBB5
 463               	.LM40:
 464 0160 0197      		sbiw r24,1
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 465               		.stabn	68,0,120,.LM41-.LFBB5
 466               	.LM41:
 467 0162 01F4      		brne .L29
 468               	.LBE69:
 469               	.LBE68:
 470               		.stabs	"display.c",132,0,0,.Ltext9
 471               	.Ltext9:
 112:display.c     ****             _delay_ms(500);
 113:display.c     ****             led_radio_immediate_set(0);
 472               		.stabn	68,0,114,.LM42-.LFBB5
 473               	.LM42:
 474 0164 80E0      		ldi r24,lo8(0)
 475 0166 0E94 0000 		call led_radio_immediate_set
 476 016a 8CED      		ldi r24,lo8(1500)
 477 016c 95E0      		ldi r25,hi8(1500)
 478               	.LBB72:
 479               	.LBB73:
 480               	.LBB74:
 481               	.LBB75:
 482               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext10
 483               	.Ltext10:
 484               		.stabn	68,0,105,.LM43-.LFBB5
 485               	.LM43:
 486 016e 20E7      		ldi r18,lo8(368)
 487 0170 31E0      		ldi r19,hi8(368)
 488               	.L30:
 489 0172 F901      		movw r30,r18
 490               	/* #APP */
GAS LISTING /tmp/ccFDS3rG.s 			page 16


 491               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 492 0174 3197      		1: sbiw r30,1
 493 0176 01F4      		brne 1b
 494               	 ;  0 "" 2
 495               	/* #NOAPP */
 496               	.LBE75:
 497               	.LBE74:
 498               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext11
 499               	.Ltext11:
 500               		.stabn	68,0,124,.LM44-.LFBB5
 501               	.LM44:
 502 0178 0197      		sbiw r24,1
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 503               		.stabn	68,0,120,.LM45-.LFBB5
 504               	.LM45:
 505 017a 01F4      		brne .L30
 506               	.LBE73:
 507               	.LBE72:
 508               		.stabs	"display.c",132,0,0,.Ltext12
 509               	.Ltext12:
 114:display.c     ****             _delay_ms(150);
 115:display.c     ****             led_radio_immediate_set(1);
 510               		.stabn	68,0,116,.LM46-.LFBB5
 511               	.LM46:
 512 017c 81E0      		ldi r24,lo8(1)
 513 017e 0E94 0000 		call led_radio_immediate_set
 514 0182 88EB      		ldi r24,lo8(3000)
 515 0184 9BE0      		ldi r25,hi8(3000)
 516               	.LBB76:
 517               	.LBB77:
 518               	.LBB78:
 519               	.LBB79:
 520               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext13
 521               	.Ltext13:
 522               		.stabn	68,0,105,.LM47-.LFBB5
 523               	.LM47:
 524 0186 20E7      		ldi r18,lo8(368)
 525 0188 31E0      		ldi r19,hi8(368)
 526               	.L31:
 527 018a F901      		movw r30,r18
 528               	/* #APP */
 529               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 530 018c 3197      		1: sbiw r30,1
 531 018e 01F4      		brne 1b
 532               	 ;  0 "" 2
 533               	/* #NOAPP */
 534               	.LBE79:
 535               	.LBE78:
 536               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext14
 537               	.Ltext14:
 538               		.stabn	68,0,124,.LM48-.LFBB5
 539               	.LM48:
 540 0190 0197      		sbiw r24,1
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 541               		.stabn	68,0,120,.LM49-.LFBB5
 542               	.LM49:
 543 0192 01F4      		brne .L31
GAS LISTING /tmp/ccFDS3rG.s 			page 17


 544               	.LBE77:
 545               	.LBE76:
 546               		.stabs	"display.c",132,0,0,.Ltext15
 547               	.Ltext15:
 116:display.c     ****             _delay_ms(300);
 117:display.c     ****             led_radio_immediate_set(0);
 548               		.stabn	68,0,118,.LM50-.LFBB5
 549               	.LM50:
 550 0194 80E0      		ldi r24,lo8(0)
 551 0196 0E94 0000 		call led_radio_immediate_set
 552 019a 8CED      		ldi r24,lo8(1500)
 553 019c 95E0      		ldi r25,hi8(1500)
 554               	.LBB80:
 555               	.LBB81:
 556               	.LBB82:
 557               	.LBB83:
 558               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext16
 559               	.Ltext16:
 560               		.stabn	68,0,105,.LM51-.LFBB5
 561               	.LM51:
 562 019e 20E7      		ldi r18,lo8(368)
 563 01a0 31E0      		ldi r19,hi8(368)
 564               	.L32:
 565 01a2 F901      		movw r30,r18
 566               	/* #APP */
 567               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 568 01a4 3197      		1: sbiw r30,1
 569 01a6 01F4      		brne 1b
 570               	 ;  0 "" 2
 571               	/* #NOAPP */
 572               	.LBE83:
 573               	.LBE82:
 574               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext17
 575               	.Ltext17:
 576               		.stabn	68,0,124,.LM52-.LFBB5
 577               	.LM52:
 578 01a8 0197      		sbiw r24,1
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 579               		.stabn	68,0,120,.LM53-.LFBB5
 580               	.LM53:
 581 01aa 01F4      		brne .L32
 582               	.LBE81:
 583               	.LBE80:
 584               		.stabs	"display.c",132,0,0,.Ltext18
 585               	.Ltext18:
 118:display.c     ****             _delay_ms(150);
 119:display.c     ****             led_radio_immediate_set(1);
 586               		.stabn	68,0,120,.LM54-.LFBB5
 587               	.LM54:
 588 01ac 81E0      		ldi r24,lo8(1)
 589 01ae 0E94 0000 		call led_radio_immediate_set
 590 01b2 88EB      		ldi r24,lo8(3000)
 591 01b4 9BE0      		ldi r25,hi8(3000)
 592               	.LBB84:
 593               	.LBB85:
 594               	.LBB86:
 595               	.LBB87:
GAS LISTING /tmp/ccFDS3rG.s 			page 18


 596               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext19
 597               	.Ltext19:
 598               		.stabn	68,0,105,.LM55-.LFBB5
 599               	.LM55:
 600 01b6 20E7      		ldi r18,lo8(368)
 601 01b8 31E0      		ldi r19,hi8(368)
 602               	.L33:
 603 01ba F901      		movw r30,r18
 604               	/* #APP */
 605               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 606 01bc 3197      		1: sbiw r30,1
 607 01be 01F4      		brne 1b
 608               	 ;  0 "" 2
 609               	/* #NOAPP */
 610               	.LBE87:
 611               	.LBE86:
 612               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext20
 613               	.Ltext20:
 614               		.stabn	68,0,124,.LM56-.LFBB5
 615               	.LM56:
 616 01c0 0197      		sbiw r24,1
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 617               		.stabn	68,0,120,.LM57-.LFBB5
 618               	.LM57:
 619 01c2 01F4      		brne .L33
 620               	.LBE85:
 621               	.LBE84:
 622               		.stabs	"display.c",132,0,0,.Ltext21
 623               	.Ltext21:
 120:display.c     ****             _delay_ms(300);
 121:display.c     ****             led_radio_immediate_set(0);
 624               		.stabn	68,0,122,.LM58-.LFBB5
 625               	.LM58:
 626 01c4 80E0      		ldi r24,lo8(0)
 627 01c6 0E94 0000 		call led_radio_immediate_set
 628 01ca 8CED      		ldi r24,lo8(1500)
 629 01cc 95E0      		ldi r25,hi8(1500)
 630               	.LBB88:
 631               	.LBB89:
 632               	.LBB90:
 633               	.LBB91:
 634               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext22
 635               	.Ltext22:
 636               		.stabn	68,0,105,.LM59-.LFBB5
 637               	.LM59:
 638 01ce 20E7      		ldi r18,lo8(368)
 639 01d0 31E0      		ldi r19,hi8(368)
 640               	.L34:
 641 01d2 F901      		movw r30,r18
 642               	/* #APP */
 643               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 644 01d4 3197      		1: sbiw r30,1
 645 01d6 01F4      		brne 1b
 646               	 ;  0 "" 2
 647               	/* #NOAPP */
 648               	.LBE91:
 649               	.LBE90:
GAS LISTING /tmp/ccFDS3rG.s 			page 19


 650               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext23
 651               	.Ltext23:
 652               		.stabn	68,0,124,.LM60-.LFBB5
 653               	.LM60:
 654 01d8 0197      		sbiw r24,1
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 655               		.stabn	68,0,120,.LM61-.LFBB5
 656               	.LM61:
 657 01da 01F4      		brne .L34
 658               	.LBE89:
 659               	.LBE88:
 660               		.stabs	"display.c",132,0,0,.Ltext24
 661               	.Ltext24:
 122:display.c     ****             _delay_ms(150);
 123:display.c     ****             led_radio_immediate_set(1);
 662               		.stabn	68,0,124,.LM62-.LFBB5
 663               	.LM62:
 664 01dc 81E0      		ldi r24,lo8(1)
 665 01de 0E94 0000 		call led_radio_immediate_set
 666 01e2 88EB      		ldi r24,lo8(3000)
 667 01e4 9BE0      		ldi r25,hi8(3000)
 668               	.LBB92:
 669               	.LBB93:
 670               	.LBB94:
 671               	.LBB95:
 672               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext25
 673               	.Ltext25:
 674               		.stabn	68,0,105,.LM63-.LFBB5
 675               	.LM63:
 676 01e6 20E7      		ldi r18,lo8(368)
 677 01e8 31E0      		ldi r19,hi8(368)
 678               	.L35:
 679 01ea F901      		movw r30,r18
 680               	/* #APP */
 681               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 682 01ec 3197      		1: sbiw r30,1
 683 01ee 01F4      		brne 1b
 684               	 ;  0 "" 2
 685               	/* #NOAPP */
 686               	.LBE95:
 687               	.LBE94:
 688               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h",132,0,0,.Ltext26
 689               	.Ltext26:
 690               		.stabn	68,0,124,.LM64-.LFBB5
 691               	.LM64:
 692 01f0 0197      		sbiw r24,1
 120:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay.h **** 		while(__ticks)
 693               		.stabn	68,0,120,.LM65-.LFBB5
 694               	.LM65:
 695 01f2 01F4      		brne .L35
 696               	.LBE93:
 697               	.LBE92:
 698               		.stabs	"display.c",132,0,0,.Ltext27
 699               	.Ltext27:
 124:display.c     ****             _delay_ms(300);
 125:display.c     ****             led_radio_immediate_set(0);
 700               		.stabn	68,0,126,.LM66-.LFBB5
GAS LISTING /tmp/ccFDS3rG.s 			page 20


 701               	.LM66:
 702 01f4 80E0      		ldi r24,lo8(0)
 703 01f6 0E94 0000 		call led_radio_immediate_set
 126:display.c     **** 
 127:display.c     ****             ignoreButtons = 1;
 704               		.stabn	68,0,128,.LM67-.LFBB5
 705               	.LM67:
 706 01fa 81E0      		ldi r24,lo8(1)
 707 01fc 8093 0000 		sts ignoreButtons.1633,r24
 708 0200 0895      		ret
 709               	.L28:
 128:display.c     **** 
 129:display.c     ****             return;
 130:display.c     ****         }
 131:display.c     **** 
 132:display.c     ****         if (g_DisplayState.display_Power)
 710               		.stabn	68,0,133,.LM68-.LFBB5
 711               	.LM68:
 712 0202 8091 0000 		lds r24,g_DisplayState
 713 0206 8823      		tst r24
 714 0208 01F0      		breq .L40
 715 020a 00C0      		rjmp .L48
 716               	.L27:
 133:display.c     ****             display_TogglePower(1);
 134:display.c     **** 
 135:display.c     ****     }else if (button_released(BUTTON_DISP))
 717               		.stabn	68,0,136,.LM69-.LFBB5
 718               	.LM69:
 719 020c 81E0      		ldi r24,lo8(1)
 720 020e 0E94 0000 		call button_released
 721 0212 8823      		tst r24
 722 0214 01F0      		breq .L40
 136:display.c     ****     {
 137:display.c     ****         if (ignoreButtons)
 723               		.stabn	68,0,138,.LM70-.LFBB5
 724               	.LM70:
 725 0216 8091 0000 		lds r24,ignoreButtons.1633
 726 021a 8823      		tst r24
 727 021c 01F0      		breq .L36
 138:display.c     ****         {
 139:display.c     ****             ignoreButtons = 0;
 728               		.stabn	68,0,140,.LM71-.LFBB5
 729               	.LM71:
 730 021e 1092 0000 		sts ignoreButtons.1633,__zero_reg__
 731 0222 0895      		ret
 732               	.L36:
 140:display.c     ****             return;
 141:display.c     ****         }
 142:display.c     **** 
 143:display.c     ****         // if timer elapsed, then do nothing, since this means, that we had previously
 144:display.c     ****         // made something out of it
 145:display.c     ****         if (g_tickNumber > stopped)
 733               		.stabn	68,0,146,.LM72-.LFBB5
 734               	.LM72:
 735 0224 2091 0000 		lds r18,g_tickNumber
 736 0228 3091 0000 		lds r19,(g_tickNumber)+1
 737 022c 4091 0000 		lds r20,(g_tickNumber)+2
GAS LISTING /tmp/ccFDS3rG.s 			page 21


 738 0230 5091 0000 		lds r21,(g_tickNumber)+3
 739 0234 8091 0000 		lds r24,stopped.1632
 740 0238 9091 0000 		lds r25,(stopped.1632)+1
 741 023c A091 0000 		lds r26,(stopped.1632)+2
 742 0240 B091 0000 		lds r27,(stopped.1632)+3
 743 0244 8217      		cp r24,r18
 744 0246 9307      		cpc r25,r19
 745 0248 A407      		cpc r26,r20
 746 024a B507      		cpc r27,r21
 747 024c 00F0      		brlo .L40
 146:display.c     ****             return;
 147:display.c     **** 
 148:display.c     ****         // if display was off, then turn it on
 149:display.c     ****         if (!g_DisplayState.display_Power)
 748               		.stabn	68,0,150,.LM73-.LFBB5
 749               	.LM73:
 750 024e 8091 0000 		lds r24,g_DisplayState
 751 0252 8823      		tst r24
 752 0254 01F4      		brne .L37
 753               	.L48:
 150:display.c     ****             display_TogglePower(1);
 754               		.stabn	68,0,151,.LM74-.LFBB5
 755               	.LM74:
 756 0256 81E0      		ldi r24,lo8(1)
 757 0258 0E94 0000 		call display_TogglePower
 758 025c 0895      		ret
 759               	.L37:
 151:display.c     **** 
 152:display.c     ****         // if display was on, then just switch inputs, however only if
 153:display.c     ****         else
 154:display.c     ****         {
 155:display.c     ****             display_ToggleInput(!button(BUTTON_MENU_LR) || !button(BUTTON_SELECT));
 760               		.stabn	68,0,156,.LM75-.LFBB5
 761               	.LM75:
 762 025e 80E1      		ldi r24,lo8(16)
 763 0260 0E94 0000 		call button
 764 0264 8823      		tst r24
 765 0266 01F0      		breq .L38
 766 0268 8DE0      		ldi r24,lo8(13)
 767 026a 0E94 0000 		call button
 768 026e 8823      		tst r24
 769 0270 01F0      		breq .L38
 770 0272 80E0      		ldi r24,lo8(0)
 771 0274 90E0      		ldi r25,hi8(0)
 772 0276 00C0      		rjmp .L39
 773               	.L38:
 774 0278 81E0      		ldi r24,lo8(1)
 775 027a 90E0      		ldi r25,hi8(1)
 776               	.L39:
 777 027c 0E94 0000 		call display_ToggleInput
 778               	.L40:
 779 0280 0895      		ret
 780               		.size	display_updateState, .-display_updateState
 781               		.stabs	"started:V(6,6)",40,0,89,started.1631
 782               		.stabs	"stopped:V(6,6)",40,0,90,stopped.1632
 783               		.stabs	"ignoreButtons:V(6,2)",38,0,91,ignoreButtons.1633
 784               		.stabn	192,0,0,.LFBB5-.LFBB5
GAS LISTING /tmp/ccFDS3rG.s 			page 22


 785               		.stabs	"__ticks:r(6,4)",64,0,112,24
 786               		.stabn	192,0,0,.LBB69-.LFBB5
 787               		.stabs	"__count:r(6,4)",64,0,123,30
 788               		.stabn	192,0,0,.LBB70-.LFBB5
 789               		.stabn	224,0,0,.LBE70-.LFBB5
 790               		.stabn	224,0,0,.LBE69-.LFBB5
 791               		.stabs	"__ticks:r(6,4)",64,0,112,24
 792               		.stabn	192,0,0,.LBB73-.LFBB5
 793               		.stabs	"__count:r(6,4)",64,0,123,30
 794               		.stabn	192,0,0,.LBB74-.LFBB5
 795               		.stabn	224,0,0,.LBE74-.LFBB5
 796               		.stabn	224,0,0,.LBE73-.LFBB5
 797               		.stabs	"__ticks:r(6,4)",64,0,112,24
 798               		.stabn	192,0,0,.LBB77-.LFBB5
 799               		.stabs	"__count:r(6,4)",64,0,123,30
 800               		.stabn	192,0,0,.LBB78-.LFBB5
 801               		.stabn	224,0,0,.LBE78-.LFBB5
 802               		.stabn	224,0,0,.LBE77-.LFBB5
 803               		.stabs	"__ticks:r(6,4)",64,0,112,24
 804               		.stabn	192,0,0,.LBB81-.LFBB5
 805               		.stabs	"__count:r(6,4)",64,0,123,30
 806               		.stabn	192,0,0,.LBB82-.LFBB5
 807               		.stabn	224,0,0,.LBE82-.LFBB5
 808               		.stabn	224,0,0,.LBE81-.LFBB5
 809               		.stabs	"__ticks:r(6,4)",64,0,112,24
 810               		.stabn	192,0,0,.LBB85-.LFBB5
 811               		.stabs	"__count:r(6,4)",64,0,123,30
 812               		.stabn	192,0,0,.LBB86-.LFBB5
 813               		.stabn	224,0,0,.LBE86-.LFBB5
 814               		.stabn	224,0,0,.LBE85-.LFBB5
 815               		.stabs	"__ticks:r(6,4)",64,0,112,24
 816               		.stabn	192,0,0,.LBB89-.LFBB5
 817               		.stabs	"__count:r(6,4)",64,0,123,30
 818               		.stabn	192,0,0,.LBB90-.LFBB5
 819               		.stabn	224,0,0,.LBE90-.LFBB5
 820               		.stabn	224,0,0,.LBE89-.LFBB5
 821               		.stabs	"__ticks:r(6,4)",64,0,112,24
 822               		.stabn	192,0,0,.LBB93-.LFBB5
 823               		.stabs	"__count:r(6,4)",64,0,123,30
 824               		.stabn	192,0,0,.LBB94-.LFBB5
 825               		.stabn	224,0,0,.LBE94-.LFBB5
 826               		.stabn	224,0,0,.LBE93-.LFBB5
 827               		.stabn	224,0,0,.Lscope5-.LFBB5
 828               	.Lscope5:
 829               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 830               		.stabd	78,0,0
 831               		.stabs	"display_init:F(0,15)",36,0,21,display_init
 832               	.global	display_init
 833               		.type	display_init, @function
 834               	display_init:
 835               		.stabd	46,0,0
  21:display.c     **** {
 836               		.stabn	68,0,21,.LM76-.LFBB6
 837               	.LM76:
 838               	.LFBB6:
 839               	/* prologue: function */
 840               	/* frame size = 0 */
GAS LISTING /tmp/ccFDS3rG.s 			page 23


  23:display.c     ****     DDRC |= (1 << DDC3); PORTC |= (1 << 3);
 841               		.stabn	68,0,23,.LM77-.LFBB6
 842               	.LM77:
 843 0282 A39A      		sbi 52-32,3
 844 0284 AB9A      		sbi 53-32,3
  26:display.c     ****     DDRC |= (1 << DDC4); PORTC |= (1 << 4);
 845               		.stabn	68,0,26,.LM78-.LFBB6
 846               	.LM78:
 847 0286 A49A      		sbi 52-32,4
 848 0288 AC9A      		sbi 53-32,4
 849               	.L50:
  29:display.c     ****     eeprom_busy_wait();
 850               		.stabn	68,0,29,.LM79-.LFBB6
 851               	.LM79:
 852 028a E199      		sbic 60-32,1
 853 028c 00C0      		rjmp .L50
  30:display.c     ****     g_DisplayState.display_Input = eeprom_read_byte(&g_eeprom_DisplayState.display_Input);
 854               		.stabn	68,0,30,.LM80-.LFBB6
 855               	.LM80:
 856 028e 80E0      		ldi r24,lo8(g_eeprom_DisplayState+1)
 857 0290 90E0      		ldi r25,hi8(g_eeprom_DisplayState+1)
 858 0292 0E94 0000 		call __eerd_byte_m32
 859 0296 8093 0000 		sts g_DisplayState+1,r24
  31:display.c     ****     g_DisplayState.display_Power = eeprom_read_byte(&g_eeprom_DisplayState.display_Power);
 860               		.stabn	68,0,31,.LM81-.LFBB6
 861               	.LM81:
 862 029a 80E0      		ldi r24,lo8(g_eeprom_DisplayState)
 863 029c 90E0      		ldi r25,hi8(g_eeprom_DisplayState)
 864 029e 0E94 0000 		call __eerd_byte_m32
 865 02a2 8093 0000 		sts g_DisplayState,r24
 866               	/* epilogue start */
  32:display.c     **** }
 867               		.stabn	68,0,32,.LM82-.LFBB6
 868               	.LM82:
 869 02a6 0895      		ret
 870               		.size	display_init, .-display_init
 871               	.Lscope6:
 872               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 873               		.stabd	78,0,0
 874               		.lcomm ignoreButtons.1633,1
 875               		.lcomm stopped.1632,4
 876               		.lcomm started.1631,4
 877               		.comm g_DisplayState,2,1
 878               	.global	g_eeprom_DisplayState
 879               		.section	.eeprom,"aw",@progbits
 880               		.type	g_eeprom_DisplayState, @object
 881               		.size	g_eeprom_DisplayState, 2
 882               	g_eeprom_DisplayState:
 883 0000 0000      		.skip 2,0
 884               		.stabs	"started:V(6,6)",40,0,89,started.1631
 885               		.stabs	"stopped:V(6,6)",40,0,90,stopped.1632
 886               		.stabs	"ignoreButtons:V(6,2)",38,0,91,ignoreButtons.1633
 887               		.stabs	"g_DisplayState:G(0,17)",32,0,16,0
 888               		.stabs	"g_eeprom_DisplayState:G(0,17)",32,0,17,0
 889               		.text
 890               		.stabs	"",100,0,0,.Letext0
 891               	.Letext0:
GAS LISTING /tmp/ccFDS3rG.s 			page 24


GAS LISTING /tmp/ccFDS3rG.s 			page 25


DEFINED SYMBOLS
                            *ABS*:00000000 display.c
     /tmp/ccFDS3rG.s:2      *ABS*:0000003f __SREG__
     /tmp/ccFDS3rG.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccFDS3rG.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccFDS3rG.s:5      *ABS*:00000034 __CCP__
     /tmp/ccFDS3rG.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccFDS3rG.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccFDS3rG.s:114    .text:00000000 display_setInputState
                            *COM*:00000002 g_DisplayState
     /tmp/ccFDS3rG.s:882    .eeprom:00000000 g_eeprom_DisplayState
     /tmp/ccFDS3rG.s:147    .text:00000014 display_ToggleInput
     /tmp/ccFDS3rG.s:235    .text:00000054 display_setPowerState
     /tmp/ccFDS3rG.s:268    .text:00000068 display_TogglePower
     /tmp/ccFDS3rG.s:354    .text:000000a2 display_updateState
     /tmp/ccFDS3rG.s:875    .bss:00000005 started.1631
     /tmp/ccFDS3rG.s:874    .bss:00000001 stopped.1632
                             .bss:00000000 ignoreButtons.1633
     /tmp/ccFDS3rG.s:834    .text:00000282 display_init

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__eewr_byte_m32
__divmodhi4
button_pressed
g_tickNumber
button_down
led_radio_immediate_set
button_released
button
__eerd_byte_m32
